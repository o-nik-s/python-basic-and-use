# Еще одной полезной библиотекой для работы с функциями является библиотека functools

# И мы рассмотрим главную функцию от нее - функцию partial
# Функция partial позволяет запомнить нам некоторые аргументы, с которыми мы бы хотели вызвать функцию,
# и возвращает нам функцию, в которую нам эти аргументы передавать больше не нужно

from functools import partial

x = int("1101", base=2)  # Задаем число в двоичной системе счисления
print(x)

# Однако мы хотим написать функцию, которая принимала бы в качестве аргументов одно число, а делала бы то же самое
# Вызываеле бы функцию Int и указывала явным аргументом base = 2

int_2 = partial(int, base=2)
x = int_2("1101")
print(x)

# Таким образом, patrial берет функцию и частично подставляет в нее какие-то из аргументов
# При этмо возвращая нам новую функцию, в которую больше эти аргументы подставлять уже не нужно

# Теперь, применяя данные значния. мы можем написать одну большую функцию


x = [
    ("Guido", "van", "Rossum"),
    ("Haskell", "Curry"),
    ("Johb", "Backus")
]

import operator as op
from functools import partial

sort_by_last = partial(list.sort, key=op.itemgetter(-1))
print(x)
sort_by_last(x)
print(x)

# Однако наша функция является универсалльной
y = ["abc", "cba", "abb"]
sort_by_last(y)
print(y)
# Так же отсортировали строки по последнему символу

