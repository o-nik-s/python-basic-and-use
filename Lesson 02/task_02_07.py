'''Целое положительное число называется простым, если оно имеет ровно два различных делителя, то есть 
делится только на единицу и на само себя.
Например, число 2 является простым, так как делится только на 1 и 2. Также простыми являются, например, 
числа 3, 5, 31, и еще бесконечно много чисел.
Число 4, например, не является простым, так как имеет три делителя – 1, 2, 4. Также простым не является 
число 1, так как оно имеет ровно один делитель – 1.

Реализуйте функцию-генератор primes, которая будет генерировать простые числа в порядке возрастания, 
начиная с числа 2.

Пример использования:﻿

print(list(itertools.takewhile(lambda x : x <= 31, primes())))
# [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]'''


import itertools

primesSet = set()

def isprime(x):
    for pr in primesSet:
        if x % pr == 0:
            return False
    return True

def primes():
    i = 2
    while True:
        if isprime(i):
            primesSet.add(i)
            yield i
        i += 1

# n = int(input())

print(list(itertools.takewhile(lambda x : x <= 31, primes())))

# n = 10**4 Elapsed time: 0.125 sec
# n = 10**5 Elapsed time: 7.130 sec


'''Есть теорема Вильсона и ей проверять проще всего, правда надо импортировать math для факториала:
Натуральное p>1 является простым тогда и только тогда, когда (p-1)!+1 делится на p.'''

'''Можно попробовать разбить задачу на более мелкие. Для начала реализуйте проверку числа на то, что оно просто 
(тут не надо ничего крутого выдумать, подойдет самый наивный метод, просто пробовать делить на все числе меньше данного), 
дальше напишите функцию, которая перебирает в цикле числа, и если встречает простое, то печатает его, 
дальше заменяете печать числа на yield. Все.'''

'''Всем, кто не понял, как же должна выглядеть функция primes()... Представьте, что вам нужно генерировать 
и выводить в консоль бесконечную последовательность простых чисел до тех пор пока пользователь не выключит компьютер ;-)
А теперь замените print на yield - это будет как раз то, что и требовалось.'''