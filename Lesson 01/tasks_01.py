# task_01_01
'''Реализуйте программу, которая принимает последовательность чисел и выводит их сумму.

Вашей программе на вход подается последовательность строк.
Первая строка содержит число n (1 ≤ n ≤ 100).
В следующих n строках содержится по одному целому числу.

Выведите одно число – сумму данных n чисел.

Примечание:
﻿Чтобы считать одно число из стандартного потока ввода, можно использовать, например, следующий код

n = int(input())'''

n = int(input())
sumn = 0
for i in range(n):
    v = int(input())
    sumn += v
print(sumn)


# task_01_02
'''Реализуйте программу, которая будет вычислять количество различных объектов в списке.
Два объекта a и b считаются различными, если a is b равно False.

Вашей программе доступна переменная с названием objects, которая ссылается на список, 
содержащий не более 100 объектов. Выведите количество различных объектов в этом списке.'''

'''Формат ожидаемой программы:

ans = 0
for obj in objects: # доступная переменная objects
    ans += 1

print(ans)'''

'''Примечание:
Количеством различных объектов называется максимальный размер множества объектов, в котором 
любые два объекта являются различными.

Рассмотрим пример:
objects = [1, 2, 1, 2, 3] # будем считать, что одинаковые числа соответствуют 
одинаковым объектам, а различные – различным

Тогда все различные объекты являют собой множество {1, 2, 3}﻿. Таким образом, 
количество различных объектов равно трём.'''

objects = [1, 2, 3, 1, 2, 3, [1,  2, 3]]
setOfIdnt = set()
for obj in objects: # доступная переменная objects
    setOfIdnt.add(id(obj))
print(len(setOfIdnt))


# task_01_03
# Что будет выведено на экран в результате исполнения данного кода?

a = []

def foo(arg1, arg2):
  a.append("foo")

foo(a.append("arg1"), a.append("arg2"))

print(a)


# task_01_04
'''В процессе выполнения кода на стек добавляются и со стека снимаются функции. Добавление функции на стек 
увеличивает его размер на 1, снятие функции со стека уменьшает его размер на 1.

Чему равен максимальный размер стека в процессе выполнения следующего кода?
Обратите внимание, что при интерпретации кода на стеке находится функция module, 
которую также нужно учесть при подсчете размера стека.
В рамках данного задания можно считать, что функция print ﻿не вызывает дополнительных функций внутри себя.'''


def h():
  print(12)

def f():
  g(h)

def g(a):
  a()

g(f)


# task_01_05
'''Напишите реализацию функции closest_mod_5, принимающую в качестве единственного аргумента 
целое число x и возвращающую самое маленькое целое число y, такое что:
- y больше или равно x
- y делится нацело на 5'''

def closest_mod_5(x):
    for y in range(x, x + 5):
        if y % 5 == 0:
            return y

print(closest_mod_5(14))


'''Решения других пользователей'''

'''def closest_mod_5(x):
    return 4-(x-1)%5+x'''


# task_01_06
'''Дана функция s﻿:
def s(a, *vs, b=10):
   res = a + b
   for v in vs:
       res += v
   return res
В результате каких вызовов данная функция вернет число 31?'''


def s(a, *vs, b=10):
   res = a + b
   for v in vs:
       res += v
   return res


# print(s(b=31))
print(s(21))
print(s(0, 0, 31))
print(s(11, 10, 10))
print(s(11, 10, b=10))
# print(s(b=31, 0))
print(s(11, b=20))
print(s(5, 5, 5, 5, 1))
print(s(11, 10))


# task_01_07
'''Сочетанием из n элементов по k называется подмножество этих n элементов размера k.
Два сочетания называются различными, если одно из сочетаний содержит элемент, который не содержит другое.
Числом сочетаний из n по k называется количество различных сочетаний из n по k. Обозначим это число за C(n, k).

Для вычисления C(n, k) используется следующая рекуррентная формула: 
C(n, k) = C(n - 1, k) + C(n - 1, k - 1).

Реализуйте программу, которая для заданных n и k вычисляет C(n, k).

Вашей программе на вход подается строка, содержащая два целых числа n и k.
Ваша программа должна вывести единственное число: C(n, k).

Примечание:
Считать два числа n и k﻿ вы можете, например, следующим образом:
n, k = map(int, input().split())'''


def C(n, k):
    if k > n:
        return 0
    elif n == 0 or k == 0 or n == k:
        return 1
    else:
        return C(n - 1, k) + C(n - 1, k - 1)


n, k = map(int, input().split())
if k > n:
    print(0)
else:
    print(C(n, k))


# task_01_08
'''.................'''

