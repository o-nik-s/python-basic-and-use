# Обзорно об интернете: http-запросы, html-страницы и requests

# Http - протокол обмена гипертекстом
# Базовая концепция гипертестов - гиперссылки

# Http-протокол:
# Две стороны, участвующие в общении.
# 1 сторона - КЛиент - мы.
# 2 сторона - сервер, на который мы делаем запрос.
# Т.е. мы будет запрашивать у сервера ресурсы.

# Ресурсы мы описываем в интернете, используя Url
# Url - uniform resourse localor - единообразный локатор ресурсов
# Это о том, как и где мы можем достать ресурс

# https: - протокол /протоколы отличаются друг от друга; другой - ftp/
# stepic.org - домен/хост /нужен чтобы распознать, на какой из этих компьютеров-серверов нужно отправить запрос/
# 512 - путь до ресурса /нужно показать, какой именно из всех ресурсов нам нужен/

# http - текстовый протокол
# ПОэтому запрос и ответ идут в виде текста

# GET /wiki/Python HTTP/1.1
# GET - метод, который хотим применить к ресурсу
# /wiki/Python - тот ресурс, который мы хотим получить внутри Вкипедии
# HTTP/1.1 - версия нашего http-протокола

# Методы http-протокола:
# GET - получить информацию с данного ресурса
# POST - изменим те или иные данные, которые связаны с тем ресурсом, который мы запрашиваем
# И другие методы

# Так же в запросе может быть несколько заголовков, разделенных точкой
# И все это составляет запрос REQUEST

# Ответ RESPONSE на запрос возвращается в похожем формате

# Статусные коды
# 200 - успешно загрузили страницу
# 404 - ресурс не был найден на сервере
# 500 - произошла ошибка при обработке Вашего запроса

# HEADER -пустая строка- BODY


# HTML - это язык разметки гипертекста

# Чаще всего html-тест интерпретируется браузерами, и благодаря тэегам, браузер понимает, как должен выглядеть
# данный элемент или где он должен находиться

# href = hyper reference

'''
requests

Вы можете установить библиотеку requests, используя утилиту pip.

pip install requests
# или
pip3 install requests
'''

import requests

res = requests.get("https://docs.python.org/3.5/") # Отправляем запрос
print(res.status_code) # Статус ответа
# Все headerы доступны в качестве словаря
print(res.headers)
print(res.headers['Content-Type'])

# Функция get из модуля requests возвращает нам response object.
# Response - это класс, который описан внутри библиотеки requests, и он содержит в себе описание ответа сервера
# В качестве атрибутов нам доступны статус коды, хеадеры, которые нам передали, и в том числе само содержимое нашего ресурса

# Чтобы пролучить содержимое ресурса
print(res.content)
# Ответом являются именно бинарные данные. Это связано с тем, что мы можем использовать http-протокол не только для передачи
# текстовой информации, но и для передачи изображений, музыки или любой другой информации. Поэтому содержание, т.е. контент,
# по умолчанию является бинарными данными. Однако если мы уверены, что контент является текстовым, то мы можем явно использовать
# атрибут text.
print(res.text)
print(res.text)
print()

res = requests.get("https://docs.python.org/3.5/_static/py.png") # Нужен код иконки
print(res.status_code)
print(res.headers['Content-Type'])
print(res.content)
# Получили бинарный файл

# Сохраним данную информацию в файл
with open("python.png", "wb") as f: # Откроем файл в бинарном формате
    f.write(res.content)

# Для некоторых ресурсов есть возможность указать параметры, которые необходимы для получения информации
# res = requests.get("https://yandex.ru/search?text=Stepic") # Указываем в качестве параметра text текст, который является поисковым запросом
res = requests.get("https://yandex.ru/search", params={"text": "Stepic"}) # Указываем в качестве параметра text текст, который является поисковым запросом
print(res.status_code)
print(res.headers['Content-Type'])
print(res.url) # Атрибут url ответа, который содержит тот адрес, который запрашивался
print(res.content)
print(res.text)
print()



# Имена параметров зависят от домена

# Библиотека request умеет переводить параметры в правильный вид, который соответствовал бы стандарту url

res = requests.get("https://yandex.ru/search/",
                   params={
                       "text": "Stepic",
                       "test": "test1",
                       "name": "Name With Spaces",
                       "list": ["test1", "test2"]
                   })
print(res.status_code)
print(res.headers['Content-Type'])
print(res.url)
# print(res.text)

# Так же в библиотеке request реализованы методы POST и все прочие методы, которые вообще поддерживаются

